{"ast":null,"code":"import React,{useState,useEffect}from'react';import{motion,AnimatePresence}from'framer-motion';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const Loader=()=>{const[text,setText]=useState(\"afinity\");const[animationPhase,setAnimationPhase]=useState(0);useEffect(()=>{const timeline=[{phase:1,text:\"ai\",delay:1000},// Shrink to \"ai\"\n{phase:2,text:\"ai\",delay:800},// Hold \"ai\"\n{phase:3,text:\"afinity\",delay:1000}// Expand back to \"afinity\"\n];let timeoutId;const runAnimation=function(){let step=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;if(step<timeline.length){timeoutId=setTimeout(()=>{setAnimationPhase(timeline[step].phase);setText(timeline[step].text);runAnimation(step+1);},timeline[step].delay);}};runAnimation();return()=>clearTimeout(timeoutId);},[]);const containerVariants={initial:{opacity:1},exit:{opacity:0,transition:{duration:0.5}}};const textVariants={shrink:{scale:0.3,opacity:0.8,transition:{duration:0.8}},hold:{scale:0.3,opacity:1,transition:{duration:0.5}},expand:{scale:1,opacity:1,transition:{duration:0.8}}};const getTextVariant=()=>{switch(animationPhase){case 1:return\"shrink\";case 2:return\"hold\";case 3:return\"expand\";default:return\"expand\";}};// Function to render text with green \"i\" in \"ai\"\nconst renderText=()=>{if(text===\"ai\"){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-black\",children:\"a\"}),/*#__PURE__*/_jsx(\"span\",{className:\"text-green-500\",children:\"i\"})]});}return text.split('').map((char,index)=>/*#__PURE__*/_jsx(\"span\",{className:\"text-black\",children:char},index));};return/*#__PURE__*/_jsx(AnimatePresence,{children:/*#__PURE__*/_jsx(motion.div,{className:\"fixed inset-0 flex items-center justify-center bg-white z-50\",variants:containerVariants,initial:\"initial\",exit:\"exit\",children:/*#__PURE__*/_jsx(motion.div,{className:\"font-bold text-5xl md:text-7xl\",variants:textVariants,animate:getTextVariant(),children:renderText()})})});};export default Loader;","map":{"version":3,"names":["React","useState","useEffect","motion","AnimatePresence","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Loader","text","setText","animationPhase","setAnimationPhase","timeline","phase","delay","timeoutId","runAnimation","step","arguments","length","undefined","setTimeout","clearTimeout","containerVariants","initial","opacity","exit","transition","duration","textVariants","shrink","scale","hold","expand","getTextVariant","renderText","children","className","split","map","char","index","div","variants","animate"],"sources":["G:/aifinity/src/components/Loader.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\n\r\nconst Loader = () => {\r\n  const [text, setText] = useState(\"afinity\");\r\n  const [animationPhase, setAnimationPhase] = useState(0);\r\n  \r\n  useEffect(() => {\r\n    const timeline = [\r\n      { phase: 1, text: \"ai\", delay: 1000 },     // Shrink to \"ai\"\r\n      { phase: 2, text: \"ai\", delay: 800 },      // Hold \"ai\"\r\n      { phase: 3, text: \"afinity\", delay: 1000 } // Expand back to \"afinity\"\r\n    ];\r\n    \r\n    let timeoutId;\r\n    \r\n    const runAnimation = (step = 0) => {\r\n      if (step < timeline.length) {\r\n        timeoutId = setTimeout(() => {\r\n          setAnimationPhase(timeline[step].phase);\r\n          setText(timeline[step].text);\r\n          runAnimation(step + 1);\r\n        }, timeline[step].delay);\r\n      }\r\n    };\r\n    \r\n    runAnimation();\r\n    \r\n    return () => clearTimeout(timeoutId);\r\n  }, []);\r\n  \r\n  const containerVariants = {\r\n    initial: { opacity: 1 },\r\n    exit: { opacity: 0, transition: { duration: 0.5 } }\r\n  };\r\n  \r\n  const textVariants = {\r\n    shrink: { scale: 0.3, opacity: 0.8, transition: { duration: 0.8 } },\r\n    hold: { scale: 0.3, opacity: 1, transition: { duration: 0.5 } },\r\n    expand: { scale: 1, opacity: 1, transition: { duration: 0.8 } }\r\n  };\r\n  \r\n  const getTextVariant = () => {\r\n    switch(animationPhase) {\r\n      case 1: return \"shrink\";\r\n      case 2: return \"hold\";\r\n      case 3: return \"expand\";\r\n      default: return \"expand\";\r\n    }\r\n  };\r\n\r\n  // Function to render text with green \"i\" in \"ai\"\r\n  const renderText = () => {\r\n    if (text === \"ai\") {\r\n      return (\r\n        <>\r\n          <span className=\"text-black\">a</span>\r\n          <span className=\"text-green-500\">i</span>\r\n        </>\r\n      );\r\n    }\r\n    \r\n    return text.split('').map((char, index) => (\r\n      <span key={index} className=\"text-black\">{char}</span>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      <motion.div \r\n        className=\"fixed inset-0 flex items-center justify-center bg-white z-50\"\r\n        variants={containerVariants}\r\n        initial=\"initial\"\r\n        exit=\"exit\"\r\n      >\r\n        <motion.div\r\n          className=\"font-bold text-5xl md:text-7xl\"\r\n          variants={textVariants}\r\n          animate={getTextVariant()}\r\n        >\r\n          {renderText()}\r\n        </motion.div>\r\n      </motion.div>\r\n    </AnimatePresence>\r\n  );\r\n};\r\n\r\nexport default Loader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}