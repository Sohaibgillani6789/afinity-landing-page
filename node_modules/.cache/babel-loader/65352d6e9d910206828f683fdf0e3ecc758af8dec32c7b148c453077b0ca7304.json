{"ast":null,"code":"var _jsxFileName = \"G:\\\\aifinity\\\\src\\\\components\\\\Loader.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Loader = () => {\n  _s();\n  const [text, setText] = useState(\"afinity\");\n  const [animationPhase, setAnimationPhase] = useState(0);\n  useEffect(() => {\n    const timeline = [{\n      phase: 1,\n      text: \"ai\",\n      delay: 1000\n    },\n    // Shrink to \"ai\"\n    {\n      phase: 2,\n      text: \"ai\",\n      delay: 800\n    },\n    // Hold \"ai\"\n    {\n      phase: 3,\n      text: \"afinity\",\n      delay: 1000\n    } // Expand back to \"afinity\"\n    ];\n    let timeoutId;\n    const runAnimation = (step = 0) => {\n      if (step < timeline.length) {\n        timeoutId = setTimeout(() => {\n          setAnimationPhase(timeline[step].phase);\n          setText(timeline[step].text);\n          runAnimation(step + 1);\n        }, timeline[step].delay);\n      }\n    };\n    runAnimation();\n    return () => clearTimeout(timeoutId);\n  }, []);\n  const containerVariants = {\n    initial: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0,\n      transition: {\n        duration: 0.5\n      }\n    }\n  };\n  const textVariants = {\n    shrink: {\n      scale: 0.3,\n      opacity: 0.8,\n      transition: {\n        duration: 0.8\n      }\n    },\n    hold: {\n      scale: 0.3,\n      opacity: 1,\n      transition: {\n        duration: 0.5\n      }\n    },\n    expand: {\n      scale: 1,\n      opacity: 1,\n      transition: {\n        duration: 0.8\n      }\n    }\n  };\n  const getTextVariant = () => {\n    switch (animationPhase) {\n      case 1:\n        return \"shrink\";\n      case 2:\n        return \"hold\";\n      case 3:\n        return \"expand\";\n      default:\n        return \"expand\";\n    }\n  };\n\n  // Function to render text with green \"i\" in \"ai\"\n  const renderText = () => {\n    if (text === \"ai\") {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-black\",\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-green-500\",\n          children: \"i\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n    return text.split('').map((char, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-black\",\n      children: char\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(AnimatePresence, {\n    children: /*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"fixed inset-0 flex items-center justify-center bg-white z-50\",\n      variants: containerVariants,\n      initial: \"initial\",\n      exit: \"exit\",\n      children: /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"font-bold text-5xl md:text-7xl\",\n        variants: textVariants,\n        animate: getTextVariant(),\n        children: renderText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(Loader, \"6RAszbbABT9SaIaWbQcJDQBR1N0=\");\n_c = Loader;\nexport default Loader;\nvar _c;\n$RefreshReg$(_c, \"Loader\");","map":{"version":3,"names":["React","useState","useEffect","motion","AnimatePresence","jsxDEV","_jsxDEV","Fragment","_Fragment","Loader","_s","text","setText","animationPhase","setAnimationPhase","timeline","phase","delay","timeoutId","runAnimation","step","length","setTimeout","clearTimeout","containerVariants","initial","opacity","exit","transition","duration","textVariants","shrink","scale","hold","expand","getTextVariant","renderText","children","className","fileName","_jsxFileName","lineNumber","columnNumber","split","map","char","index","div","variants","animate","_c","$RefreshReg$"],"sources":["G:/aifinity/src/components/Loader.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\n\r\nconst Loader = () => {\r\n  const [text, setText] = useState(\"afinity\");\r\n  const [animationPhase, setAnimationPhase] = useState(0);\r\n  \r\n  useEffect(() => {\r\n    const timeline = [\r\n      { phase: 1, text: \"ai\", delay: 1000 },     // Shrink to \"ai\"\r\n      { phase: 2, text: \"ai\", delay: 800 },      // Hold \"ai\"\r\n      { phase: 3, text: \"afinity\", delay: 1000 } // Expand back to \"afinity\"\r\n    ];\r\n    \r\n    let timeoutId;\r\n    \r\n    const runAnimation = (step = 0) => {\r\n      if (step < timeline.length) {\r\n        timeoutId = setTimeout(() => {\r\n          setAnimationPhase(timeline[step].phase);\r\n          setText(timeline[step].text);\r\n          runAnimation(step + 1);\r\n        }, timeline[step].delay);\r\n      }\r\n    };\r\n    \r\n    runAnimation();\r\n    \r\n    return () => clearTimeout(timeoutId);\r\n  }, []);\r\n  \r\n  const containerVariants = {\r\n    initial: { opacity: 1 },\r\n    exit: { opacity: 0, transition: { duration: 0.5 } }\r\n  };\r\n  \r\n  const textVariants = {\r\n    shrink: { scale: 0.3, opacity: 0.8, transition: { duration: 0.8 } },\r\n    hold: { scale: 0.3, opacity: 1, transition: { duration: 0.5 } },\r\n    expand: { scale: 1, opacity: 1, transition: { duration: 0.8 } }\r\n  };\r\n  \r\n  const getTextVariant = () => {\r\n    switch(animationPhase) {\r\n      case 1: return \"shrink\";\r\n      case 2: return \"hold\";\r\n      case 3: return \"expand\";\r\n      default: return \"expand\";\r\n    }\r\n  };\r\n\r\n  // Function to render text with green \"i\" in \"ai\"\r\n  const renderText = () => {\r\n    if (text === \"ai\") {\r\n      return (\r\n        <>\r\n          <span className=\"text-black\">a</span>\r\n          <span className=\"text-green-500\">i</span>\r\n        </>\r\n      );\r\n    }\r\n    \r\n    return text.split('').map((char, index) => (\r\n      <span key={index} className=\"text-black\">{char}</span>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      <motion.div \r\n        className=\"fixed inset-0 flex items-center justify-center bg-white z-50\"\r\n        variants={containerVariants}\r\n        initial=\"initial\"\r\n        exit=\"exit\"\r\n      >\r\n        <motion.div\r\n          className=\"font-bold text-5xl md:text-7xl\"\r\n          variants={textVariants}\r\n          animate={getTextVariant()}\r\n        >\r\n          {renderText()}\r\n        </motion.div>\r\n      </motion.div>\r\n    </AnimatePresence>\r\n  );\r\n};\r\n\r\nexport default Loader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}