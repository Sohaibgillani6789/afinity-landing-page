{"version":3,"file":"static/js/921.6ab7f81d.chunk.js","mappings":"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","sources":["components/VideoSection.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\n\r\nconst videos = [\r\n  {\r\n    id: 1,\r\n    title: \"Afinity uses data and artificial intelligence to transform the quality of    interpersonal interactions\",\r\n    url: \"/videos/hyy.webm\",\r\n    buttonId: \"what-we-do\"\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"How We Do It\",\r\n    url: \"/videos/loll.webm\",\r\n    buttonId: \"how-we-do-it\"\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"What We Deliver\",\r\n    url: \"/videos/jiu.webm\",\r\n    buttonId: \"what-we-deliver\"\r\n  }\r\n];\r\n\r\nconst VIDEO_DURATION = 11000; // milliseconds (11s)\r\n\r\nconst VideoSection = () => {\r\n  const [activeVideo, setActiveVideo] = useState(0);\r\n  const [showButton, setShowButton] = useState(true);\r\n  const [nextButtonIndex, setNextButtonIndex] = useState(1);\r\n  const [timerKey, setTimerKey] = useState(0);\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\r\n  const [isHovering, setIsHovering] = useState(false);\r\n  const [loadedVideos, setLoadedVideos] = useState(new Set());\r\n  \r\n  const playerRef = useRef(null);\r\n  const timerRef = useRef(null);\r\n  const videoPreloadRefs = useRef(new Map());\r\n  const buttonTimeoutRef = useRef(null);\r\n  const resizeTimeoutRef = useRef(null);\r\n\r\n  // Memoized video variants to prevent recreation\r\n  const videoVariants = useMemo(() => ({\r\n    hidden: { opacity: 0 },\r\n    visible: { opacity: 1, transition: { duration: 1 } },\r\n    exit: { opacity: 0, transition: { duration: 0.5 } }\r\n  }), []);\r\n\r\n  const buttonVariants = useMemo(() => ({\r\n    hidden: { opacity: 0, y: 20 },\r\n    visible: {\r\n      opacity: 1,\r\n      y: 0,\r\n      transition: {\r\n        type: \"spring\",\r\n        stiffness: 300,\r\n        damping: 20\r\n      }\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      y: -20,\r\n      transition: { duration: 0.2 }\r\n    }\r\n  }), []);\r\n\r\n  const cursorVariants = useMemo(() => ({\r\n    default: { \r\n      x: cursorPosition.x - 16, \r\n      y: cursorPosition.y - 16,\r\n      scale: 1\r\n    },\r\n    hover: { \r\n      x: cursorPosition.x - 16, \r\n      y: cursorPosition.y - 16, \r\n      scale: 1.5,\r\n      backgroundColor: \"rgba(255, 255, 255, 0.4)\",\r\n      mixBlendMode: \"difference\"\r\n    }\r\n  }), [cursorPosition.x, cursorPosition.y]);\r\n\r\n  // Optimized video preloading with better memory management\r\n  useEffect(() => {\r\n    const preloadVideos = async () => {\r\n      // Only preload the first video initially\r\n      const firstVideo = videos[0];\r\n      if (!videoPreloadRefs.current.has(firstVideo.id)) {\r\n        const videoElement = document.createElement('video');\r\n        videoElement.src = firstVideo.url;\r\n        videoElement.preload = 'metadata';\r\n        videoElement.muted = true;\r\n        videoElement.playsInline = true;\r\n        \r\n        videoPreloadRefs.current.set(firstVideo.id, videoElement);\r\n        \r\n        await new Promise((resolve) => {\r\n          const onCanPlay = () => {\r\n            setLoadedVideos(prev => new Set([...prev, firstVideo.id]));\r\n            videoElement.removeEventListener('canplay', onCanPlay);\r\n            resolve();\r\n          };\r\n          \r\n          const onError = () => {\r\n            console.warn(`Failed to preload video: ${firstVideo.url}`);\r\n            videoElement.removeEventListener('error', onError);\r\n            resolve();\r\n          };\r\n          \r\n          videoElement.addEventListener('canplay', onCanPlay);\r\n          videoElement.addEventListener('error', onError);\r\n        });\r\n      }\r\n\r\n      // Preload next video when needed\r\n      const preloadNextVideo = (nextIndex) => {\r\n        if (nextIndex < videos.length) {\r\n          const nextVideo = videos[nextIndex];\r\n          if (!videoPreloadRefs.current.has(nextVideo.id)) {\r\n            const videoElement = document.createElement('video');\r\n            videoElement.src = nextVideo.url;\r\n            videoElement.preload = 'metadata';\r\n            videoElement.muted = true;\r\n            videoElement.playsInline = true;\r\n            \r\n            videoPreloadRefs.current.set(nextVideo.id, videoElement);\r\n          }\r\n        }\r\n      };\r\n\r\n      // Add listener for video changes to preload next video\r\n      const handleVideoChange = (index) => {\r\n        preloadNextVideo(index + 1);\r\n      };\r\n\r\n      return handleVideoChange;\r\n    };\r\n\r\n    const cleanup = preloadVideos();\r\n\r\n    return () => {\r\n      if (typeof cleanup === 'function') {\r\n        cleanup();\r\n      }\r\n      videoPreloadRefs.current.forEach((videoElement) => {\r\n        videoElement.src = '';\r\n        videoElement.load();\r\n      });\r\n      videoPreloadRefs.current.clear();\r\n    };\r\n  }, []);\r\n\r\n  // Debounced resize handler\r\n  const handleResize = useCallback(() => {\r\n    if (resizeTimeoutRef.current) {\r\n      clearTimeout(resizeTimeoutRef.current);\r\n    }\r\n    \r\n    resizeTimeoutRef.current = setTimeout(() => {\r\n      setIsMobile(window.innerWidth < 768);\r\n    }, 100);\r\n  }, []);\r\n\r\n  // Check for mobile devices with debouncing\r\n  useEffect(() => {\r\n    setIsMobile(window.innerWidth < 768);\r\n    window.addEventListener('resize', handleResize);\r\n    \r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      if (resizeTimeoutRef.current) {\r\n        clearTimeout(resizeTimeoutRef.current);\r\n      }\r\n    };\r\n  }, [handleResize]);\r\n\r\n  // Throttled cursor tracking\r\n  const throttledCursorUpdate = useCallback((e) => {\r\n    setCursorPosition({ x: e.clientX, y: e.clientY });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isMobile) return;\r\n    \r\n    let rafId;\r\n    const trackCursor = (e) => {\r\n      if (rafId) return;\r\n      \r\n      rafId = requestAnimationFrame(() => {\r\n        throttledCursorUpdate(e);\r\n        rafId = null;\r\n      });\r\n    };\r\n\r\n    window.addEventListener('mousemove', trackCursor, { passive: true });\r\n    \r\n    return () => {\r\n      window.removeEventListener('mousemove', trackCursor);\r\n      if (rafId) {\r\n        cancelAnimationFrame(rafId);\r\n      }\r\n    };\r\n  }, [isMobile, throttledCursorUpdate]);\r\n\r\n  // Optimized timer management\r\n  const startVideoTimer = useCallback(() => {\r\n    if (timerRef.current) {\r\n      clearInterval(timerRef.current);\r\n    }\r\n    \r\n    timerRef.current = setInterval(() => {\r\n      setActiveVideo(current => {\r\n        const nextIndex = (current + 1) % videos.length;\r\n        setNextButtonIndex((nextIndex + 1) % videos.length);\r\n        return nextIndex;\r\n      });\r\n    }, VIDEO_DURATION);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    startVideoTimer();\r\n    return () => {\r\n      if (timerRef.current) {\r\n        clearInterval(timerRef.current);\r\n      }\r\n    };\r\n  }, [startVideoTimer]);\r\n\r\n  // Optimized button show logic\r\n  useEffect(() => {\r\n    if (buttonTimeoutRef.current) {\r\n      clearTimeout(buttonTimeoutRef.current);\r\n    }\r\n    \r\n    setShowButton(false);\r\n    buttonTimeoutRef.current = setTimeout(() => {\r\n      if (nextButtonIndex < videos.length) {\r\n        setShowButton(true);\r\n      }\r\n    }, 3000);\r\n\r\n    return () => {\r\n      if (buttonTimeoutRef.current) {\r\n        clearTimeout(buttonTimeoutRef.current);\r\n      }\r\n    };\r\n  }, [activeVideo, nextButtonIndex]);\r\n\r\n  const handleVideoChange = useCallback((index, isManualClick = true) => {\r\n    if (index === activeVideo) return; // Prevent unnecessary updates\r\n    \r\n    setShowButton(false);\r\n    setActiveVideo(index);\r\n    setNextButtonIndex((index + 1) % videos.length);\r\n    \r\n    if (isManualClick) {\r\n      setTimerKey(prevKey => prevKey + 1);\r\n      startVideoTimer();\r\n    }\r\n  }, [activeVideo, startVideoTimer]);\r\n\r\n  const handleButtonHover = useCallback((hovering) => {\r\n    if (!isMobile) {\r\n      setIsHovering(hovering);\r\n    }\r\n  }, [isMobile]);\r\n\r\n  // Memoized current video data\r\n  const currentVideo = useMemo(() => videos[activeVideo], [activeVideo]);\r\n  const nextVideo = useMemo(() => videos[nextButtonIndex], [nextButtonIndex]);\r\n\r\n  return (\r\n    <div className=\"relative w-full h-screen overflow-hidden\">\r\n      {/* Background Video */}\r\n      <AnimatePresence mode=\"wait\">\r\n        <motion.div\r\n          key={`video-${activeVideo}`}\r\n  className=\"absolute inset-0 w-full h-full pointer-events-none\"\r\n          variants={videoVariants}\r\n          initial=\"hidden\"\r\n          animate=\"visible\"\r\n          exit=\"exit\"\r\n        >\r\n          <ReactPlayer\r\n            ref={playerRef}\r\n            url={currentVideo.url}\r\n            playing\r\n            loop\r\n            muted\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            playsinline\r\n            style={{ objectFit: 'cover', position: 'absolute', top: 0, left: 0, pointerEvents: 'none' }}\r\n            config={{\r\n              file: {\r\n                attributes: {\r\n                  preload: 'metadata',\r\n                  style: {\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    objectFit: 'cover',\r\n                  }\r\n                }\r\n              }\r\n            }}\r\n          />\r\n          <div className=\"absolute inset-0 bg-gradient-to-b from-black/40 via-black/20 to-black/70\" />\r\n        </motion.div>\r\n      </AnimatePresence>\r\n\r\n      {/* Button Nav - Desktop (Top Right) */}\r\n      {!isMobile && (\r\n<div className=\"absolute top-8 right-[calc(2rem--250px)] z-[5000] flex flex-row gap-8 pointer-events-auto\">\r\n          {videos.map((video, index) => (\r\n            <div key={video.id} className=\"flex flex-col group\">\r\n              <button\r\n                id={video.buttonId}\r\n                className={`text-white uppercase text-lm font-medium tracking-wider  ${\r\n                  activeVideo === index ? 'opacity-100' : 'opacity-40 hover:opacity-100'\r\n                } transition-opacity duration-300 text-left`}\r\n                onClick={() => handleVideoChange(index, true)}\r\n                onMouseEnter={() => handleButtonHover(true)}\r\n                onMouseLeave={() => handleButtonHover(false)}\r\n              >\r\n                {video.buttonId.replace(/-/g, ' ')}\r\n              </button>\r\n       \r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Button Nav - Mobile/Tablet (Top Right as Circles) */}\r\n      {isMobile && (\r\n        <div className=\"absolute bottom-20 right-8 z-20 flex flex-row gap-4\">\r\n          {videos.map((video, index) => (\r\n            <button\r\n              key={video.id}\r\n              id={video.buttonId}\r\n              className={`w-3 h-3 rounded-full ${activeVideo === index ? 'bg-green-600' : 'bg-white/50'} transition-all duration-300`}\r\n              onClick={() => handleVideoChange(index, true)}\r\n              aria-label={`Video ${index + 1}`}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Text content - Responsive positioning */}\r\n      <div className=\"absolute inset-0 flex flex-col justify-center text-left z-10 px-4 sm:px-6 md:px-8 lg:ml-40 lg:px-4\">\r\n        <motion.h1\r\n          className=\"text-2xl xs:text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold text-white mb-3 sm:mb-4 md:mb-6 max-w-full sm:max-w-2xl md:max-w-3xl lg:max-w-4xl xl:max-w-5xl leading-tight sm:leading-tight md:leading-tight\"\r\n          initial={{ opacity: 0, y: -20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: 0.3, duration: 0.5 }}\r\n          key={`title-${activeVideo}`}\r\n        >\r\n          {currentVideo.title}\r\n        </motion.h1>\r\n\r\n        <motion.p\r\n          className=\"text-sm xs:text-base sm:text-lg md:text-xl lg:text-2xl text-white/80 max-w-full sm:max-w-md md:max-w-lg lg:max-w-xl leading-relaxed sm:leading-relaxed\"\r\n          animate={{ opacity: 1 }}\r\n          transition={{ delay: 0.1, duration: 0.1 }}\r\n          key={`desc-${activeVideo}`}\r\n        >\r\n          Find out how we help businesses pair better.\r\n        </motion.p>\r\n      </div>\r\n\r\n      {/* Next Button - Responsive */}\r\n      <AnimatePresence>\r\n        {showButton && nextButtonIndex !== activeVideo && (\r\n          <motion.button\r\n            variants={buttonVariants}\r\n            initial=\"hidden\"\r\n            animate=\"visible\"\r\n            exit=\"exit\"\r\n            className={`absolute ${isMobile ? 'bottom-8 left-4 right-4 w-auto' : 'bottom-10 left-1/2 transform -translate-x-1/2'} bg-green-600/30 backdrop-blur-sm text-white px-4 py-2 sm:px-6 sm:py-2 rounded-full border border-white/30 hover:bg-white/30 transition-all z-30 cursor-pointer text-sm sm:text-base`}\r\n            onClick={() => handleVideoChange(nextButtonIndex, true)}\r\n            onMouseEnter={() => handleButtonHover(true)}\r\n            onMouseLeave={() => handleButtonHover(false)}\r\n            style={{ zIndex: 40 }}\r\n          >\r\n            Discover {nextVideo.buttonId.replace(/-/g, ' ')} →\r\n          </motion.button>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoSection;"],"names":["videos","id","title","url","buttonId","VideoSection","activeVideo","setActiveVideo","useState","showButton","setShowButton","nextButtonIndex","setNextButtonIndex","timerKey","setTimerKey","isMobile","setIsMobile","cursorPosition","setCursorPosition","x","y","isHovering","setIsHovering","loadedVideos","setLoadedVideos","Set","playerRef","useRef","timerRef","videoPreloadRefs","Map","buttonTimeoutRef","resizeTimeoutRef","videoVariants","useMemo","hidden","opacity","visible","transition","duration","exit","buttonVariants","type","stiffness","damping","default","scale","hover","backgroundColor","mixBlendMode","useEffect","cleanup","async","firstVideo","current","has","videoElement","document","createElement","src","preload","muted","playsInline","set","Promise","resolve","onCanPlay","prev","removeEventListener","onError","console","warn","concat","addEventListener","index","nextIndex","length","nextVideo","preloadNextVideo","preloadVideos","forEach","load","clear","handleResize","useCallback","clearTimeout","setTimeout","window","innerWidth","throttledCursorUpdate","e","clientX","clientY","rafId","trackCursor","requestAnimationFrame","passive","cancelAnimationFrame","startVideoTimer","clearInterval","setInterval","handleVideoChange","isManualClick","arguments","undefined","prevKey","handleButtonHover","hovering","currentVideo","_jsxs","className","children","_jsx","AnimatePresence","mode","motion","div","variants","initial","animate","ReactPlayer","ref","playing","loop","width","height","playsinline","style","objectFit","position","top","left","pointerEvents","config","file","attributes","map","video","onClick","onMouseEnter","onMouseLeave","replace","h1","delay","p","button","zIndex"],"sourceRoot":""}